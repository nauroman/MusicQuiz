// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Quiz;
//
//    var playlist = Question.FromJson(jsonString);
// https://app.quicktype.io/?l=csharp

using System;
using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace MusicQuiz.Data
{
    public partial class Playlist
    {
        [JsonProperty("id")] public string Id { get; set; }

        [JsonProperty("questions")] public Question[] Questions { get; set; }

        [JsonProperty("playlist")] public string PlaylistPlaylist { get; set; }
    }

    public partial class Question
    {
        [JsonProperty("id")] public string Id { get; set; }

        [JsonProperty("answerIndex")] public int AnswerIndex { get; set; }

        [JsonProperty("choices")] public Choice[] Choices { get; set; }

        [JsonProperty("song")] public Song Song { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }
    }

    public partial class Choice
    {
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        public int Index { get; set; }

        [JsonProperty("artist")] public string Artist { get; set; }

        [JsonProperty("title")] public string Title { get; set; }
    }

    public partial class Song
    {
        [JsonProperty("id")] public string Id { get; set; }

        [JsonProperty("title")] public string Title { get; set; }

        [JsonProperty("artist")] public string Artist { get; set; }

        [JsonProperty("picture")] public Uri Picture { get; set; }

        [JsonProperty("sample")] public Uri Sample { get; set; }
    }

    public partial class Playlists
    {
        public static Playlist[] FromJson(string json) =>
            JsonConvert.DeserializeObject<Playlist[]>(json, Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Playlist[] self) => JsonConvert.SerializeObject(self, Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter {DateTimeStyles = DateTimeStyles.AssumeUniversal}
            },
        };
    }
}